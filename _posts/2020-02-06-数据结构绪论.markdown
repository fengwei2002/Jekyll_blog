---
layout: post
title: 第一章：绪论上
tags: [数据结构]
date: 2020-02-06
---
## 计算

### 清华Oj使用

[共有四次作业](https://dsa.cs.tsinghua.edu.cn/oj/foyer.shtml)

computer science should be called computing science,for the same  
reason why surgery（手术） is not called knife science  
\- [E.Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra) 

### 绳索计算机及其算法

- 输入：直线l和上面任意一点A  
- 输出：经过A的一条垂线  

- 算法：
  - 古埃及人  
    红十字边框，共12段绳索，利用345直角三角形  
    将四和三点固定一个，同时拉直剩余的3+5  
    这时就出现了垂线  

### 尺规计算机及其算法

- 找一个线段的两个三等分点
- 算法：
  - 利用直角三角形等分性质。  
    直角边画出三等分点，做垂线在斜边的交点就是三等分点  

>子程序->平行线作法

### 算法  

计算：借助工具，遵循一定规则，明确而机械的进行  
正确性，确定性，可行性，有穷性

- 有穷性  
  - 序列hailstone(n)
    奇数3n+1偶数n/2，1->1
    对于任意n，hailstone<正无穷？（未证明）
so 程序不等于算法  

### 好的算法，好的计算过程

正确，健壮，可读，**效率**

## 计算模型

### measure

DSA 度量(To measure is to know)  
时间成本：
规模相近时，都考虑最坏情况

特定问题+不同算法  
实验统计是最直接的算法，但不足够反映真实效率（算法和人一样各有所长）  
所以就构建了一些理想模型来measure算法  


### 对一般计算工具的简化和抽象

- 图灵机
  - tape默认为\#
  - alphabet字符的种类有限
  - read head 总是对准某一单元格，并可读取和修改其中的字符，可像左右移动
  - q,c; d,l\r,p(前两项为状态，后面为操作)  
  若当前状态为q，字符为c，则将字符改为d，向左右移动到邻格，状态为p，若状态为h，则停机  
  q，p处  <，>  
实例：
二进制数字翻转 (<,1,0,L,<)//左移，1-\>0  
用完读写头后，将其归位；  
其次今后使用算法时要规范接口，使用时先判断接口是否符合要求  

- RAM(random access machine)  
  寄存器
  - R[i]<-c  
    R[i]<-R[j]  
    R[R[i]]<-R[j]
    R[i]<-R[j]+-R[k]  
    goto if goto stop（用来写循环)

FLoor:向下取整的除法
算法：统计R{0}减去R{1}在下溢前，所作减法的次数x

抽象后的简化，就可以用基本简单的操作来描述我们的算法，使我们独立于其他平台，能够客观的做出对算法效率的比较和评判  
运行时间<-算法需要执行基本操作的次数=T(n)  

## 大O记号

当问题规模足够大时，big O symbol

常系数可以省略，低次项可以省略（上界）
欧姆（）（下届）  sieta（）

- O(1)，常数复杂度  
    不含循环，调用，递归
- O(logn)  
    常底数无所谓,所以不标明  
    常数次幂  复杂度无限接近于常数  
- O($n^C$),多项式复杂度
    $a^kn^k==O(n^k)$
- O(n)-O($n^2$)为编程习题主要复杂度
- 指数复杂度  
  难解O($2^n$)，  
  $n^c$=$O(2^n)$,  
  $n^1000$=O(2^n)$

很多问题多项式复杂度很难，指数复杂度算法显而易见  

- 例：  
  s包含n个正整数，$\sum_{k=1}^{n}S^n$=2m
  s是否有子集T，$\sum_{}{}T=m$  
  - 枚举所有子集计算和，$2^n$   
    NPC问题，不存在可以在多项式时间内解决的方法  

指数模型增长最快  
