---
layout: post
title: 标准函数库STL
tags: [cpp+STL]
date: 2020-02-14
--- 

>使用侧面目录栏查找更方便哦~

# 容器
***

可以用于存放各种类型的数据（基本类型的变量，对象等）的数据结构，都是类模板  
对象被插入容器中时，被插入的是对象的一个复制品，许多算法所需要：放入容器的对象所属于的类一般还需要重载`==``<`运算符













## 顺序容器

容器并非排序的，插入位置与元素的值无关

### vector

头文件<vector>  
>n. 矢量；带菌者；航线  vt. 用无线电导航  向量

动态数组，元素在内存内连续存放，随机存取任何元素都能在常数时间内完成，在尾部增删元素具有较佳性能(大部分是常数时间)

### deque 

头文件<deque>  
>n. 双端队列；双队列

双向队列，元素在内存内连续存放，随机存取任何元素都能在常数时间内完成(但次于vector)，在两端增删元素具有较佳性能(大部分是常数时间)

### list双向链表，

头文件<list>

双向链表，元素在空间内不是连续存放的，在任何位置增删元素都能在常数时间内完成，调用元素时要事先知道位置，不支持随机存取

### 顺序容器常用成员函数

- front: 第一个元素的引用
- back: 最后一个元素的引用
- push_back: 在容器末尾增加新的元素
- pop_back: 删除容器末尾的元素
- earse: 删除迭代器所指向的元素(迭代器可能失效),或删除一个区间，返回被删除元素后面的那个元素的迭代器


























## 关联容器

- 元素是排序的
- 插入任何元素都按照相应的排序规则来确定其位置
- 在查找时具有较好的性能
- 通常以平衡二叉树方式实现，插入和检索时间都很快

### set/multiset

头文件<set>

set即集合，set中不允许有相同的元素，multiset中允许存在相同的元素

### map/multimap

头文件<map>

map中存放的元素有且仅有两个成员变量，一个名为first另一个名为second，map根据first的值对元素进行从小到大的排序，并可以快速的
根据first来检索元素，multimap里面允许有相同first值的元素



















## 容器适配器

### stack

头文件<stack>  

栈，后进先出，检索和修改的项只能是最近插入栈顶的项

### queue

头文件<queue>

队列，插入只可以从尾部进行，检索和修改只允许从头部进行，先进先出

### priority_queue

头文件<queue>

优先级队列，最高优先级元素总是第一个出列

### 顺序容器和关联容器共有的成员函数

- began返回第一个元素的迭代器
- rbegan返回最后一个元素的迭代器
- end最后一个元素后面的位置
- rend第一个元素前面的位置
- erase从容器中删除一个或几个元素
- clear从容器中删除所有元素














## 迭代器

- 用于指向顺序容器和关联容器中的元素
- 用法和指针类似
- 有const和非const两种
- 通过迭代器可以读取他所指向的元素
- 通过非const迭代器还能修改其指向的元素

定义一个容器类迭代器的方法可以是

`容器类名::iterator 变量名`

>n. 迭代器；迭代程序

或
`容器类名::const_iterator 变量名`

访问一个迭代器所指向的元素，`*迭代器变量名`

# 算法

函数模板




