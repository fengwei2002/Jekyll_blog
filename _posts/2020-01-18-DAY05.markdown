---
layout: post
title: DAY 05 (一些操作符重载)
categories: [笔记]
tags: [C++ STL笔记]
date: 2020-01-26
---
## 等号操作符重载
***
```cpp
类& operator=(const 类名 &another){
    if (this ==&another){
        return *this;
    }
    //先将自己空间删除
    else if (this->name !=NULL){
        delete[] this->name;
        this->name=NULL;
        this->id=0;
    }
    //执行深拷贝
    this->id=another.id;
    int len =strlen (another.name);
    this->name= new char[len+1];
    strcpy(this->name,another.name);
    return *this;
}

```
若成员中存在指针，
就需要重新构造等号操作符

额外开辟一个空间

和深拷贝用法类似

自定义的数组类中：
***
 重载[]:
 ```cpp
 int &MyArray::operator[](int index){
     return this->space[index];
     //return 一个int值
 }
 ```
 重载<<:
 ```cpp

ostream &operator<<(ostream &os,MyArray &array){
    for (int i = 0; i < array.getlen(); i++){
        os<<array[i]<<" ";
    }
}

getlen()中是可修改的指针
如果传入函数的第二个为const,就会不安全，报错 
```

不建议重载并且或者操作符

因为存在短路现象


## 自定义智能指针
```cpp
#include<memory>
int main (){
    int *p = new int;
    ayto_ptr<int> ptr(new int);
//ptr就是地址
    *ptr =20;
}
```
 正常\*p需要delete，这样构造的\*ptr 不用
    这样用完的指针不需要手动释放
    实际上是一个类，
```cpp
class MYATUOPTR
{
public:
    MYATUIPTR(void *ptr){
        this->=ptr;
    }
    ~MYAUTOPTR(){
        if (ptr!=NULL){
            delete[] ptr;
            this->
        }
    }
private:


}
## 作业
*** 
1.  完成讲义中的自定义的数组类，并且添加常用的操作符重载

2.  完成自定义的string类

> 自定义string类

my_string.h
```cpp
#pragma once
//默认就有字符串类，include <string>
class my_string
{
public:
	my_string();
	my_string(int len);
	my_string(const char* str);
	my_string(const my_string& another);
	~my_string();
	void ppp(int a);
	//重载[ ]
	char& operator[](int a);
	//重载 ==
	bool operator==(const my_string& another);
	//重载 ！=
	bool operator!=( const my_string& another);
	//重载 =
	my_string& operator=(const my_string& another);
	//重载 +
	my_string& operator+(const my_string& b);
	//重载 <<
	ostream& operator<<(ostream os,my_string& median);
	//重载 >>
private:
	int len;
	char* str;
};
int main() {
	my_string s1("asa");
	s1[2] = 'a';

	return 0;
}
```


my_string.cpp
```cpp

#include<cstring>//使用memcpy函数
#include "string.h"
#include <iostream>
using namespace std;

my_string::my_string() {
	cout << "调用了无参构造" << endl;
	this->len = 0;
	this->str = NULL;
}

my_string::my_string(int len) {
	cout << "创建了len长度的字符串" << endl;
	this->len = len;
	this->str = new char[len + 1];
}

my_string::my_string(const char* str) {
	cout << "使用const字符串来初始化" << endl;
	this->len = strlen(str);
	char *median = new char [strlen(str)+1];
	memcpy(median, str, strlen(str));
	median[len] = '\0';
	this->str = median;
}

my_string::my_string(const my_string& another) {
	cout << "调用了构造函数" << endl;
	this->len = another.len;
	this->str = another.str;
}

my_string::~my_string() {
	cout << "调用了析构函数" << endl;
	if (str != NULL) {
		delete str;
		this->str = NULL;
	}
}

my_string& my_string:: operator=(const my_string& another) {
	cout << "使用了重载=操作符" << endl;
	this->len = another.len;
	this->str = another.str;
}

bool my_string:: operator!=(const my_string& another) {
	cout << "使用了重载!=操作符" << endl;
	if (this->len != another.len || this->str != another.str) {
		cout<<"!="<<endl;
		return false;
	}
	else {
		return true;
	}
}

bool my_string::operator==(const my_string& another) {
	if (my_string::operator!=(another)&& this->str == another.str) {
		return true;
	}
	else {
		return false;
	}
}

char& my_string::operator[](int a){
	cout << "使用了[]重载" << endl;
	return this->str[a];
}

my_string& my_string::operator+(const my_string& b) {
	cout << "使用了+重载" << endl;
	char* median2 = new char[strlen(this->str) + strlen(b.str)+1];
	memcpy(median2, this->str, strlen(this->str));
	memcpy(median2 + strlen(this->str),b.str,strlen(b.str));
	this->str = median2;
	return *this;
}


string s1 = "1234";
```

main.cpp
```cpp
#include <iostream>
using namespace std;
#include "my_string.h"
int main (){


    return 0;
}

```
3.  操作符重载<<操作符， 能够写成一个自定义类的成员函数？





4.  对于|| 和 && 符号的操作符重载，会有什么问题？




5. C++中 string类 是不是普通数据类型？


6 = 操作符重载需要注意的地方

