---
layout: post
title: 第六章：图
tags: [数据结构]
date: 2020-03-01
---

对数据限定减少，解决的问题规模变大

## 术语

一般用 e(edge) 来表示边的总数  用 v(vertex) 表示节点的总数  
邻接关系 V - V 关联关系 V - e   
此前的数据结构可以看作其特例(树，列表)   
>>自环的边忽略掉不予讨论 

若邻接点 u 和 v 的次序无所谓 则( u , v ) 为无向边`undirected edge`  
所有边均无向就叫做无向图  
若邻接点 u 和 v 的存在固定次序 则( u , v ) 为有向边`undirected edge`   
u 称为 tail v 称作 head   
两者混在一起叫做混合图  

>路径/环路  

在一条通路中不出现重复节点，称作`simple path`, 否则叫做`path`. 回到起始点叫做`cycle(simple)`
有向无环图 (DAG)  所有的有向边在一起都可以构成一个环路(每个边都经过一遍)叫做欧拉环路，经过节点各一次 且仅有一次 叫做哈密尔顿环路

## 实现

### **Graph模板类**

```cpp
template <typename Tv,typename Te> class Graph { //顶点类型，边类型
    private:
      void reset(){ //所有顶点，边的辅助信息复位
          for (int i=0;i< n;i++){ //顶点
              status(i) = UNDISCOVERED; dTIME(i) = fTime(i) = -1;
              parent(i) = -1; priority(i) = INT_MAX;
              for (int j=0;j<n;j++) //边
                if (exists(i,j)) status (i,j) = UNDISCOVERED;
          }
      }
    public: /*顶点操作，边操作，图算法: 无论如何实现，接口必须统一*/
} //Graph
```

### **邻接矩阵**











## 算法























































































